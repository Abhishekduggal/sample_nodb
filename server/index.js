// As far as structure goes, our server folder should be in the root directory
// index.js should be inside server
// and we should run nodemon from the root by running nodemon server/index.js or nodemon server/
// get used to this because when we get into databases it'll important that we start the server from the root directory.

// install and require modules
const express = require("express");
const { json } = require("body-parser");
const cors = require("cors");
// path is a node module that comes with node, meaning it doesn't need installed.
// It's used below in sending data to the browser. more here --> https://nodejs.org/api/path.html
const path = require("path");

// what port should we listen on?
// Make sure to start your node server (nodemon) first and your react server second (yarn start || npm start).
// This should be 3001 or higher because our -->
// React Development server that runs with yarn start will run on port 3000
// When we're ready to host, we won't use the development server
// and instead will allow express to serve our react code to the browser.
const port = 3001;

// app (server) declaration
const app = express();

// top-level middleware
app.use(json());
app.use(cors());
// Used when hosting: Will serve our static production files to the browser instead of using a dev server
// the build folder is generated by running yarn build or npm build in the terminal
// comment out while in development
app.use(express.static(`${__dirname}/../build`));

// controller functions
const {
  getData,
  postData,
  putData,
  deleteData,
  paginateCoins,
  searchCoins
} = require(`${__dirname}/controllers/mainCtrl`);

// get initial data
app.get("/api/get", getData);
// get tracked coins
app.get("/api/tracked", getData);
// get different data
app.get("/api/paginatecoins", paginateCoins);
// add data
app.post("/api/post", postData);
// update data point
app.put("/api/put", putData);
// delete data point using req.params.id
app.delete("/api/delete/:id", deleteData);

// Used when hosting: Send the index.html (which is the content of our app) to the bowser on the initial request
// comment out while in development
app.get("*", (req, res, next) => {
  res.sendFile(path.join(__dirname, "../build/index.html"));
});

// Open server to requests and responses
app.listen(port, () => {
  console.log(`Listening on port: ${port}`);
});
